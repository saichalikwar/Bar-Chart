{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\chart\\\\src\\\\DataChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { CategoryScale, TimeScale, LinearScale, BarElement, Title } from 'chart.js';\nimport 'chartjs-adapter-date-fns'; // Import the date adapter\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, TimeScale, LinearScale, BarElement, Title, ...registerables);\nfunction DataChart({\n  data\n}) {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (chartRef.current && chartRef.current.chartInstance) {\n      chartRef.current.chartInstance.destroy(); // Check if chartRef.current.chartInstance exists\n    }\n  }, [data]);\n\n  // Process data to generate chart data\n  const chartData = {\n    labels: data.map(item => item.ts),\n    // Assuming ts is the timestamp field\n    datasets: [{\n      label: 'Sample Values',\n      data: data.map(item => item.machine_status === 1 ? 1 : 0),\n      // Map machine_status to 1 or 0\n      backgroundColor: data.map(item => item.machine_status === 1 ? 'green' : 'yellow'),\n      // Set colors based on machine_status\n      borderColor: 'rgba(255, 99, 132, 1)',\n      // Default color\n      borderWidth: 1\n    }]\n  };\n  console.log('Chart data:', chartData); // Log the chart data\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      ref: chartRef,\n      data: chartData,\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            // Use 'time' for time scale\n            time: {\n              parser: 'yyyy-MM-dd HH:mm:ss',\n              // Specify the timestamp format\n              unit: 'hour',\n              // Adjust based on filtering\n              displayFormats: {\n                hour: 'yyyy-MM-dd HH:mm' // Format for hour scale\n              }\n            }\n          },\n          y: {\n            // Optionally configure the y-axis scale here\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(DataChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = DataChart;\nexport default DataChart;\nvar _c;\n$RefreshReg$(_c, \"DataChart\");","map":{"version":3,"names":["React","useEffect","useRef","Bar","Chart","registerables","CategoryScale","TimeScale","LinearScale","BarElement","Title","jsxDEV","_jsxDEV","register","DataChart","data","_s","chartRef","current","chartInstance","destroy","chartData","labels","map","item","ts","datasets","label","machine_status","backgroundColor","borderColor","borderWidth","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","options","scales","x","type","time","parser","unit","displayFormats","hour","y","_c","$RefreshReg$"],"sources":["C:/Users/hp/OneDrive/Desktop/chart/src/DataChart.js"],"sourcesContent":["\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport { CategoryScale, TimeScale, LinearScale, BarElement, Title } from 'chart.js';\r\nimport 'chartjs-adapter-date-fns'; // Import the date adapter\r\n\r\nChart.register(CategoryScale, TimeScale, LinearScale, BarElement, Title, ...registerables);\r\n\r\nfunction DataChart({ data }) {\r\n    const chartRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (chartRef.current && chartRef.current.chartInstance) {\r\n            chartRef.current.chartInstance.destroy(); // Check if chartRef.current.chartInstance exists\r\n        }\r\n    }, [data]);\r\n\r\n    // Process data to generate chart data\r\n    const chartData = {\r\n        labels: data.map(item => item.ts), // Assuming ts is the timestamp field\r\n        datasets: [{\r\n            label: 'Sample Values',\r\n            data: data.map(item => item.machine_status === 1 ? 1 : 0), // Map machine_status to 1 or 0\r\n            backgroundColor: data.map(item => item.machine_status === 1 ? 'green' : 'yellow'), // Set colors based on machine_status\r\n            borderColor: 'rgba(255, 99, 132, 1)', // Default color\r\n            borderWidth: 1\r\n        }]        \r\n    };\r\n\r\n    console.log('Chart data:', chartData); // Log the chart data\r\n\r\n    return (\r\n        <div>\r\n            <h2>Data Chart</h2>\r\n            <Bar\r\n                ref={chartRef}\r\n                data={chartData}\r\n                options={{\r\n                    scales: {\r\n                        x: {\r\n                            type: 'time', // Use 'time' for time scale\r\n                            time: {\r\n                                parser: 'yyyy-MM-dd HH:mm:ss', // Specify the timestamp format\r\n                                unit: 'hour', // Adjust based on filtering\r\n                                displayFormats: {\r\n                                    hour: 'yyyy-MM-dd HH:mm' // Format for hour scale\r\n                                }\r\n                            }\r\n                        },\r\n                        y: {\r\n                            // Optionally configure the y-axis scale here\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataChart;"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAC/C,SAASC,aAAa,EAAEC,SAAS,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK,QAAQ,UAAU;AACnF,OAAO,0BAA0B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnCR,KAAK,CAACS,QAAQ,CAACP,aAAa,EAAEC,SAAS,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK,EAAE,GAAGL,aAAa,CAAC;AAE1F,SAASS,SAASA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGf,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACZ,IAAIgB,QAAQ,CAACC,OAAO,IAAID,QAAQ,CAACC,OAAO,CAACC,aAAa,EAAE;MACpDF,QAAQ,CAACC,OAAO,CAACC,aAAa,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9C;EACJ,CAAC,EAAE,CAACL,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMM,SAAS,GAAG;IACdC,MAAM,EAAEP,IAAI,CAACQ,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,CAAC;IAAE;IACnCC,QAAQ,EAAE,CAAC;MACPC,KAAK,EAAE,eAAe;MACtBZ,IAAI,EAAEA,IAAI,CAACQ,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,cAAc,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAAE;MAC3DC,eAAe,EAAEd,IAAI,CAACQ,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,cAAc,KAAK,CAAC,GAAG,OAAO,GAAG,QAAQ,CAAC;MAAE;MACnFE,WAAW,EAAE,uBAAuB;MAAE;MACtCC,WAAW,EAAE;IACjB,CAAC;EACL,CAAC;EAEDC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEZ,SAAS,CAAC,CAAC,CAAC;;EAEvC,oBACIT,OAAA;IAAAsB,QAAA,gBACItB,OAAA;MAAAsB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnB1B,OAAA,CAACT,GAAG;MACAoC,GAAG,EAAEtB,QAAS;MACdF,IAAI,EAAEM,SAAU;MAChBmB,OAAO,EAAE;QACLC,MAAM,EAAE;UACJC,CAAC,EAAE;YACCC,IAAI,EAAE,MAAM;YAAE;YACdC,IAAI,EAAE;cACFC,MAAM,EAAE,qBAAqB;cAAE;cAC/BC,IAAI,EAAE,MAAM;cAAE;cACdC,cAAc,EAAE;gBACZC,IAAI,EAAE,kBAAkB,CAAC;cAC7B;YACJ;UACJ,CAAC;UACDC,CAAC,EAAE;YACC;UAAA;QAER;MACJ;IAAE;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACtB,EAAA,CAjDQF,SAAS;AAAAoC,EAAA,GAATpC,SAAS;AAmDlB,eAAeA,SAAS;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}